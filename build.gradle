buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.1'
    }
}

group 'com.liuwill.kata'
version '1.0-SNAPSHOT'

ext.junitPlatformVersion = '1.0.1'
ext.junitJupiterVersion  = '5.0.1'
ext.log4jVersion         = '2.6.2'
ext.logbackVersion       = '1.2.3'
ext.junit4Version        = '4.12'
ext.junitVintageVersion  = '4.12.1'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'application'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'jacoco'
// apply plugin: 'com.github.ksoichiro.console.reporter'
apply plugin: 'org.junit.platform.gradle.plugin'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

mainClassName = 'com.liuwill.kata.DailyKata'

sourceSets{
    main{
        java {srcDir "src/main/java"}
        resources {srcDir "src/main/resources"}
    }
    test{
        java {srcDir "src/test/java"}
        resources {srcDir "src/test/resources"}
    }
}

dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.1")

    // JUnit Jupiter API and TestEngine implementation
    testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")

    // If you also want to support JUnit 3 and JUnit 4 tests
    testCompile("junit:junit:${junit4Version}")
    testRuntime("org.junit.vintage:junit-vintage-engine:${junitVintageVersion}")

    testRuntime("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    testRuntime("org.apache.logging.log4j:log4j-jul:${log4jVersion}")
    testCompile("ch.qos.logback:logback-classic:${logbackVersion}")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task createJavaProject {
    doLast {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs()}
    }
}


junitPlatform {
    platformVersion '1.0.1'
    filters {
        engines {
            // include 'junit-jupiter', 'junit-vintage'
            // exclude 'custom-engine'
        }
        tags {
            // include 'fast'
            exclude 'slow'
        }
        // includeClassNamePattern '.*Test'
    }
    // enableStandardTestTask true
    // reportsDir file('build/test-results/junit-platform') // this is the default
    logManager 'org.apache.logging.log4j.jul.LogManager'
    // reportsDir file('build/test-results/junit-platform') // this is the default
    // enableStandardTestTask true
    // selectors (optional)
    // filters (optional)
}

// [ FindBugs Start**/
findbugs{
    ignoreFailures=true
    findbugsTest.enabled=false
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
// ] FindBugs End**/
checkstyle{
    toolVersion = '7.8.2'
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
        // html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
    configFile = file('config/checkstyle/checkstyle.xml')
}

jacoco{
    toolVersion = "0.7.9"
    // reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    reports{
        xml.enabled = true
        html.enabled = true

        // html.destination = "${buildDir}/jacocoHtml"
    }
}

task parseCoverageSummary(dependsOn: jacocoTestReport) {
  group = 'ci'
  doLast {
    def testReportFile = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")

    def xmlParser = new XmlParser()
    xmlParser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    xmlParser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
    def reportDom = xmlParser.parse(testReportFile)
    def coverdInstruct = Integer.parseInt(reportDom.counter[0].@covered)
    def missedInstruct = Integer.parseInt(reportDom.counter[0].@missed)

    def coverageRate = Math.round(coverdInstruct * 10000 / (coverdInstruct + missedInstruct)) / 100
    println ''
    println '=========== Coverage summary ==========='
    println "${project.name} :  ${coverageRate}%"
    println ''

    reportDom.counter.each { counterData ->
      def coverdInstructLine = Integer.parseInt(counterData.@covered)
      def missedInstructLine = Integer.parseInt(counterData.@missed)
      def totalLine = coverdInstructLine + missedInstructLine

      def coverageRateLine = Math.round(coverdInstructLine * 10000 / (coverdInstructLine + missedInstructLine)) / 100
      println "${counterData.@type} :  ${coverageRateLine}%  (${coverdInstructLine}/${totalLine})"
    }
    println '========================================'
  }
}

task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    xml.setDestination(file("${buildDir}/reports/jacoco/report.xml"))
    // xml.destination "${buildDir}/reports/jacoco/report.xml"
    html.enabled false
    csv.enabled false
  }
}

codeCoverageReport.dependsOn {
  subprojects*.test
}
